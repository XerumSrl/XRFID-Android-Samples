@page "/LoadingUnits/Add"
@using XRFID.Sample.Server.Entities;
@using XRFID.Sample.Server.Repositories;
@using Xerum.XFramework.Common.Enums;
@inject ProductRepository pRepos;
@inject LoadingUnitRepository luRepos;

<MudDataGrid T="Product" MultiSelection="true" Items="@Products" SortMode="SortMode.Multiple" Filterable="true"
             Hideable="true" RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Products</MudText>
        <MudSpacer />
        @if (selectedProducts.Count > 0)
        {
            <MudButton Size="@Size.Large" Variant="@Variant.Filled" Color="@Color.Primary">New Loading Unit</MudButton>
        }
    </ToolBarContent>
    <Columns>
        <SelectColumn T="Product" />
        <PropertyColumn Property="x => x.CreationTime" Title="Date Time" />
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Epc" />
        <PropertyColumn Property="x => x.Description" />
        <PropertyColumn Property="x => x.ContentQuantity" Title="Quantity" />
        <PropertyColumn Property="x => x.SerialNumber" Title="Serial Number" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Product" />
    </PagerContent>
</MudDataGrid>

@code {

    private IEnumerable<Product> Products = new List<Product>();

    private List<Product> selectedProducts = new List<Product>();

    protected override async Task OnInitializedAsync()
    {
        List<Product> testProducts = new List<Product>();
        for (int i = 0; i < 10; i++)
        {
            testProducts.Add(new Product());
        }
        Products = testProducts;
    }

    #region Events
    void RowClicked(DataGridRowClickEventArgs<Product> args)
    {
        if (!selectedProducts.Exists(e => e.Id == args.Item.Id))
        {
            selectedProducts.Add(args.Item);
        }
        else
        {
            selectedProducts.Remove(args.Item);
        }
    }

    void SelectedItemsChanged(HashSet<Product> items)
    {
        selectedProducts = items.ToList();
    }
    #endregion

    #region DataMethods
    private async Task FillProductTable()
    {
        List<Product> allProds = await pRepos.GetAsync();
        if (allProds is null)
        {
            Products = new List<Product>();
            return;
        }
        Products = allProds;
    }

    private async Task CreateLoadingUnit()
    {
        List<LoadingUnitItem> luItems = new();
        foreach (Product prod in selectedProducts)
        {
            LoadingUnitItem newItem = new LoadingUnitItem
                {
                    Name = prod.Name,
                    Code = prod.Code,
                    Reference = prod.Reference,

                    Description = prod.Description,
                    SerialNumber = prod.SerialNumber,
                    Epc = prod.Epc,

                    Status = ItemStatus.NotFound,

                    // LoadingUnitId = 
                };
        };
    }
    #endregion
}