@page "/Printers"
@using AutoMapper;
@using XRFID.Sample.Server.Database;
@using XRFID.Sample.Server.Entities;
@using XRFID.Sample.Server.Repositories;
@using XRFID.Sample.Server.ViewModels;
@inject NavigationManager Navigation;
@inject IDialogService DialogService
@inject PrinterRepository printerRepository;
@inject UnitOfWork uow;
@inject IMapper mapper;

<h1>Printers</h1>

<MudDataGrid Items="@PrinterList"
             ReadOnly="true"
             SortMode="SortMode.Single" Filterable="true" QuickFilter="@_quickFilter" Striped="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Printers</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudButton Class="ml-3" Variant="@Variant.Filled" Color="@Color.Secondary" SartIcon="@Icons.Material.Filled.Add"
                   OnClick="@(() => AddPrinter())">Add New</MudButton>
    </ToolBarContent>
    <Columns>
        <TemplateColumn Filterable="false" Sortable="false">
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" aria-printer="edit" Size="Size.Small" OnClick="@((e) => EditPrinter(@context.Item))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-printer="delete" Size="Size.Small" OnClick="@((e) => DeletePrinter(@context.Item))" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Ip" />
        <PropertyColumn Property="x => x.Port" />
        <PropertyColumn Property="x => x.Description" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="PrinterModel" />
    </PagerContent>
</MudDataGrid>
@code {
    private List<PrinterModel> PrinterList = new List<PrinterModel>();
    private List<string> _events = new();
    private string _searchString;

    protected override async Task OnInitializedAsync()
    {
        var printer = await printerRepository.GetAsync();
        PrinterList.AddRange(mapper.Map<List<PrinterModel>>(printer));
    }

    async Task AddPrinter()
    {
        Navigation.NavigateTo($"Printers/Add");
    }

    async Task EditPrinter(PrinterModel item)
    {
        var parameters = new DialogParameters<ConfirmDialog>();
        parameters.Add(x => x.ContentText, "Do you really want to edit these records?");
        parameters.Add(x => x.ButtonText, "Edit");
        parameters.Add(x => x.Color, Color.Primary);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, DisableBackdropClick = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Edit", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            Navigation.NavigateTo($"Printers/Edit/{item.Id}");
        }
    }

    async Task DeletePrinter(PrinterModel item)
    {
        var parameters = new DialogParameters<ConfirmDialog>();
        parameters.Add(x => x.ContentText, "Do you really want to delete these records? This process cannot be undone.");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, DisableBackdropClick = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var checkItem = await printerRepository.GetAsync(item.Id);
            if (checkItem is not null)
            {
                await printerRepository.DeleteAsync(item.Id);
                await uow.SaveAsync();
                PrinterList.Remove(item);
            }
            else
            {
                //notificare item non esistente
            }
        }
    }

    // quick filter - filter gobally across multiple columns with the same input
    private Func<PrinterModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (!string.IsNullOrEmpty(x.Name) && x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrEmpty(x.Description) && x.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrEmpty(x.Ip) && x.Ip.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrEmpty(x.Port.ToString()) && x.Port.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
}