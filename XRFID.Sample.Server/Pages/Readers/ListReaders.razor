@page "/Readers"
@using AutoMapper;
@using XRFID.Sample.Server.Database;
@using XRFID.Sample.Server.Entities;
@using XRFID.Sample.Server.Repositories;
@using XRFID.Sample.Server.ViewModels;
@inject NavigationManager Navigation;
@inject IDialogService DialogService
@inject ReaderRepository readerRepository;
@inject UnitOfWork uow;
@inject IMapper mapper;

<h1>Readers</h1>

<MudDataGrid Items="@ReaderList"
             ReadOnly="true"
             SortMode="SortMode.Single" Filterable="true" QuickFilter="@_quickFilter" Striped="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Readers</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Code" />
        <PropertyColumn Property="x => x.Ip" />
        <PropertyColumn Property="x => x.HasCorrelation" />
        <TemplateColumn  Filterable="false" Sortable="false">
            <CellTemplate>
                <MudStack>
                    @if (context.Item.HasCorrelation)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.LockReset" Size="Size.Small" OnClick="@((e) => ResetCorrelation(@context.Item))" />
                    }
                    else
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" Size="Size.Small" />
                    }

                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ReaderModel" />
    </PagerContent>
</MudDataGrid>
@code {
    private List<ReaderModel> ReaderList = new List<ReaderModel>();
    private List<string> _events = new();
    private string _searchString;

    protected override async Task OnInitializedAsync()
    {
        ReaderList.Clear();
        var reader = await readerRepository.GetAsync();
        ReaderList.AddRange(mapper.Map<List<ReaderModel>>(reader));

        StateHasChanged();
    }

    async Task AddReader()
    {
        Navigation.NavigateTo($"Readers/Add");
    }

    async Task EditReader(ReaderModel item)
    {
        var parameters = new DialogParameters<ConfirmDialog>();
        parameters.Add(x => x.ContentText, "Do you really want to edit these records?");
        parameters.Add(x => x.ButtonText, "Edit");
        parameters.Add(x => x.Color, Color.Primary);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, DisableBackdropClick = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Edit", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            Navigation.NavigateTo($"Readers/Edit/{item.Id}");
        }
    }

    async Task DeleteReader(ReaderModel item)
    {
        var parameters = new DialogParameters<ConfirmDialog>();
        parameters.Add(x => x.ContentText, "Do you really want to delete these records? This process cannot be undone.");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, DisableBackdropClick = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var checkItem = await readerRepository.GetAsync(item.Id);
            if (checkItem is not null)
            {
                await readerRepository.DeleteAsync(item.Id);
                await uow.SaveAsync();
                ReaderList.Remove(item);
            }
            else
            {
                //notificare item non esistente
            }
        }
    }

    private async Task ResetCorrelation(ReaderModel item)
    {
        var entity = await readerRepository.GetAsync(item.Id);
        if (entity is not null)
        {
            entity.CorrelationId = Guid.Empty;
            await readerRepository.UpdateAsync(entity);
            await uow.SaveAsync();
            item.CorrelationId = Guid.Empty;

            StateHasChanged();

        }
    }

    // quick filter - filter gobally across multiple columns with the same input
    private Func<ReaderModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (!string.IsNullOrEmpty(x.Name) && x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrEmpty(x.Description) && x.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrEmpty(x.Ip) && x.Ip.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
}