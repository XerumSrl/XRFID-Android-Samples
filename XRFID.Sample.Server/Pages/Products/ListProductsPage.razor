@page "/Products"
@using XRFID.Sample.Server.Entities;
@inject NavigationManager Navigation;
@inject IDialogService DialogService

<MudDataGrid Items="@ProductList"
             ReadOnly="true"
             SortMode="SortMode.Single" Filterable="true" QuickFilter="@_quickFilter" Striped="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Products</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudButton Class="ml-3" Variant="@Variant.Filled" Color="@Color.Secondary" SartIcon="@Icons.Material.Filled.Add" 
        OnClick="@(() => AddProduct())">Add New</MudButton>
    </ToolBarContent>
    <Columns>
        <TemplateColumn Filterable="false" Sortable="false">
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="edit" Size="Size.Small" OnClick="@((e) => EditProduct(@context.Item))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" Size="Size.Small" OnClick="@((e) => DeleteProduct(@context.Item))" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>

        <PropertyColumn Property="x => x.SKU.Code" Title="SKU" />
        <PropertyColumn Property="x => x.CreationTime" Title="Date Creation" />
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Code" />
        <PropertyColumn Property="x => x.Description" />
        <PropertyColumn Property="x => x.Epc" />
        <PropertyColumn Property="x => x.SerialNumber" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Product" />
    </PagerContent>
</MudDataGrid>

@code {
    private List<Product> ProductList = new List<Product>();
    private string _searchString;
    private List<string> _events = new();

    protected override async Task OnInitializedAsync()
    {
        List<Product> x = new List<Product>();
        for (int i = 0; i < 6; i++)
        {
            Product s = new Product
                {
                    Name = "product_" + i.ToString(),
                    Description = "product_" + i.ToString() + "_description",
                    Epc = "product_" + i.ToString() + "_epc",
                };
            x.Add(s);
        }
        ProductList.AddRange(x);
    }

    async Task AddProduct()
    {
        Navigation.NavigateTo($"Products/Add");
    }

    async Task EditProduct(Product item)
    {
        var parameters = new DialogParameters<ConfirmDialog>();
        parameters.Add(x => x.ContentText, "Do you really want to edit these records?");
        parameters.Add(x => x.ButtonText, "Edit");
        parameters.Add(x => x.Color, Color.Primary);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, DisableBackdropClick = true };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Edit", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            Navigation.NavigateTo($"Products/Edit/{item.Id}");
        }
    }

    async Task DeleteProduct(Product item)
    {
        var parameters = new DialogParameters<ConfirmDialog>();
        parameters.Add(x => x.ContentText, "Do you really want to delete these records? This process cannot be undone.");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, DisableBackdropClick = true };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            ProductList.Remove(item);
        }
    }

    // quick filter - filter gobally across multiple columns with the same input
    private Func<Product, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (!string.IsNullOrEmpty(x.Name) && x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrEmpty(x.Code) && x.Code.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Epc.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.SerialNumber.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    };

}