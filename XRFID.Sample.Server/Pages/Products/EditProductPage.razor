@page "/Products/Edit/{Id:guid}"
@using System.Text.RegularExpressions;
@using System.ComponentModel.DataAnnotations;
@using XRFID.Sample.Server.Database;
@using XRFID.Sample.Server.Entities;
@using XRFID.Sample.Server.Repositories;
@inject NavigationManager Navigation;
@inject ProductRepository productRepository;
@inject UnitOfWork uowk;

<h1>Edit Product @model.Name?</h1>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudTextField T="string" Variant="Variant.Outlined" Label="Name" For="()=>model.Name" @bind-Value="model.Name" AutoFocus="true" />
    <MudTextField T="string" Variant="Variant.Outlined" Label="Description" For="()=>model.Description" @bind-Value="model.Description" />
    <MudTextField T="string" Variant="Variant.Outlined" Label="EPC" HelperText="24 or 32 characther HEX string" For="()=>model.Epc" @bind-Value="model.Epc" />
    <MudNumericField Variant="Variant.Outlined" Label="Quantity" For="()=>model.ContentQuantity" @bind-Value="model.ContentQuantity" />
    <MudTextField T="string" Variant="Variant.Outlined" Label="Serial Number" For="()=>model.SerialNumber" @bind-Value="model.SerialNumber" />
    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit</MudButton>
</EditForm>


@code {
    [Parameter]
    public Guid Id { get; set; }
    private Product? product;
    public bool IsDisabled { get; set; } = false;

    private FormModel model = new FormModel();


    protected override async Task OnInitializedAsync()
    {
        product = await productRepository.GetAsync(Id);
        IsDisabled = product == null;

        if (product is null)
        {
            return;
        }

        model = new FormModel
            {
                Name = product.Name ?? string.Empty,
                Description = product.Description,
                Epc = product.Epc,
                ContentQuantity = product.ContentQuantity,
                SerialNumber = product.SerialNumber,
                Note = product.Note,
            };

    }
    private async void OnValidSubmit(EditContext context)
    {
        if (product is null)
        {
            return;
        }

        product.Name = model.Name;
        product.Description = model.Description;
        product.Epc = model.Epc;
        product.ContentQuantity = model.ContentQuantity;
        product.SerialNumber = model.SerialNumber;
        product.Note = model.Note;

        Product? result = await productRepository.UpdateAsync(product);
        await uowk.SaveAsync();

        Navigation.NavigateTo($"Products");

        StateHasChanged();
    }


    private class FormModel
    {
        [Required]
        public string Name { get; set; } = string.Empty;

        [Required]
        public string Description { get; set; } = string.Empty;

        public string? Note { get; set; }

        [Required]
        [RegularExpression(@"^([0-9a-fA-F]{32}|[0-9a-fA-F]{24})$", ErrorMessage = "EPC must be a valix HEX rapresentation of 24 or 32 charachers")]
        public string Epc { get; set; } = string.Empty;

        [Range(minimum: 1, maximum: int.MaxValue)]
        public int ContentQuantity { get; set; } = 1;

        [Required]
        public string SerialNumber { get; set; } = string.Empty;
    }
}
