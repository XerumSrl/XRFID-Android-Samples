@page "/Products/Add"
@using System.Text.RegularExpressions;
@using System.ComponentModel.DataAnnotations;
@using XRFID.Sample.Server.Database;
@using XRFID.Sample.Server.Repositories;
@using XRFID.Sample.Server.ViewModels;
@inject NavigationManager Navigation;
@inject SkuRepository skuRepository;
@inject ProductRepository productRepository;
@inject UnitOfWork uow;

<h3>Add New Product</h3>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <MudStack Class="my-3">

        <DataAnnotationsValidator />
        <MudSelect T="SkuModel" Label="Sku" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="@SelectedSku" Required="true">
            @foreach (var sku in SkuList.OrderBy(q => q.Code))
            {
                <MudSelectItem Value="@sku">@sku.Code - @sku.Description</MudSelectItem>
            }
        </MudSelect>
        <MudTextField T="string" Variant="Variant.Outlined" Label="Name" For="()=>model.Name" @bind-Value="model.Name" AutoFocus="true" />
        <MudTextField T="string" Variant="Variant.Outlined" Label="Description" For="()=>model.Description" @bind-Value="model.Description" />
        <MudTextField T="string" Variant="Variant.Outlined" Label="EPC" HelperText="24 or 32 characther HEX string" For="()=>model.Epc" @bind-Value="model.Epc" />
        <MudTextField T="string" Variant="Variant.Outlined" Label="Serial Number" For="()=>model.SerialNumber" @bind-Value="model.SerialNumber" />

        <MudStack Row="true" Class="my-6 d-flex justify-end">
            <MudButton ButtonType="ButtonType.Reset" Variant="Variant.Outlined" Color="Color.Default" Class="ml-3">Reset</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Secondary" Class="ml-3">Submit</MudButton>
        </MudStack>
    </MudStack>
</EditForm>


@code {
    private AddProductModel model = new();
    private List<SkuModel> SkuList = new();
    private SkuModel SelectedSku;

    protected override async Task OnInitializedAsync()
    {
        var skus = await skuRepository.GetAsync();
        foreach (var sku in skus)
        {
            SkuList.Add(new SkuModel
                {
                    Id = sku.Id,
                    Name = sku.Name ?? sku.Id.ToString(),
                    Code = sku.Code ?? sku.Id.ToString(),
                    Description = sku.Description,
                });
        }

    }

    private async Task OnValidSubmit(EditContext context)
    {
        if (SelectedSku is null)
        {
            return;
        }
        var result = await productRepository.CreateAsync(new Entities.Product
            {
                Name = model.Name,
                Description = model.Description,
                Note = model.Note,
                Epc = model.Epc,
                ContentQuantity = model.ContentQuantity,
                SerialNumber = model.SerialNumber,
                SkuId = SelectedSku.Id,
            });
        await uow.SaveAsync();
        //fare comparire un popup che inserimento ok e rimanare alla pagina

        Navigation.NavigateTo($"Products");

        StateHasChanged();
    }

}
