@page "/CheckItems"
@using XRFID.Sample.Server.ViewModels;
@using XRFID.Sample.Server.ViewModels.Enums;
@using XRFID.Sample.Server.Workers;
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation;
@inject CheckPageWorker Worker;
@implements IAsyncDisposable;

<h1>Check RFID</h1>

<MudDataGrid Items="@Items">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Real Time RFID Tags</MudText>
        <MudSpacer />
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.DateTime" Title="Date Time" />
        <PropertyColumn Property="x => x.CheckStatus" Title="Status" CellStyleFunc="@_cellStyleFunc" />
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Epc" />
        <PropertyColumn Property="x => x.Description" />
    </Columns>
</MudDataGrid>

@code {
    private IEnumerable<CheckItemModel> Items = new List<CheckItemModel>();

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        #region SignalR
        //Subscribe this blazor page to refreshub signalR topic
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/uimessagehub"))
            .Build();

        //Wait for a message "RefreshTag"
        //When he receives it, it executes the lambda expression
        hubConnection.On("RefreshTag", async () =>
        {
            Items = await Worker.GetViewItems();
            await InvokeAsync(StateHasChanged);
        });
        await hubConnection.StartAsync();
        #endregion

        if (!Items.Any())
        {
            if (Worker.ItemsIsEmpty())
            {
                await Worker.SetViewItems();
            }
            Items = await Worker.GetViewItems();
        }
    }

    //signalR connection open
    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    private Func<CheckItemModel, string> _cellStyleFunc => x =>
    {
        string style = "";

        switch (x.CheckStatus)
        {
            case CheckStatusEnum.NotFound:
                style += "background-color:#B5D6DB";
                break;

            case CheckStatusEnum.Found:
                style += "background-color:#66FF33";
                break;

            case CheckStatusEnum.Error:
                style += "background-color:#FF0000";
                break;

            default:
                style += "background-color:#FFFFFF";
                break;
        }

        return style;
    };

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}