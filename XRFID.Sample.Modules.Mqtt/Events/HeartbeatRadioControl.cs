using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace XRFID.Sample.Modules.Mqtt.Events;


/// <summary>
/// Radio Control Heartbeat Fields
/// </summary>
[DataContract]
public class HeartbeatRadioControl
{
    /// <summary>
    /// Radio Control running status
    /// </summary>
    /// <value>Radio Control running status</value>
    [DataMember(Name = "status", EmitDefaultValue = false)]
    [JsonPropertyName("status")]
    public string Status { get; set; }

    /// <summary>
    /// Radio Control application CPU utilization
    /// </summary>
    /// <value>Radio Control application CPU utilization</value>
    [DataMember(Name = "cpu", EmitDefaultValue = false)]
    [JsonPropertyName("cpu")]
    public decimal? Cpu { get; set; }

    /// <summary>
    /// Radio Control application RAM utilization
    /// </summary>
    /// <value>Radio Control application RAM utilization</value>
    [DataMember(Name = "ram", EmitDefaultValue = false)]
    [JsonPropertyName("ram")]
    public decimal? Ram { get; set; }

    /// <summary>
    /// Radio Control Application uptime (days:hours:min)
    /// </summary>
    /// <value>Radio Control Application uptime (days:hours:min)</value>
    [DataMember(Name = "uptime", EmitDefaultValue = false)]
    [JsonPropertyName("uptime")]
    public string Uptime { get; set; }

    /// <summary>
    /// Current Inventory State
    /// </summary>
    /// <value>Current Inventory State</value>
    [DataMember(Name = "radioActivity", EmitDefaultValue = false)]
    [JsonPropertyName("radioActivity")]
    public string RadioActivity { get; set; }

    /// <summary>
    /// current radio connection status
    /// </summary>
    /// <value>current radio connection status</value>
    [DataMember(Name = "radioConnection", EmitDefaultValue = false)]
    [JsonPropertyName("radioConnection")]
    public string RadioConnection { get; set; }

    /// <summary>
    /// Gets or Sets Antennas
    /// </summary>
    [DataMember(Name = "antennas", EmitDefaultValue = false)]
    [JsonPropertyName("antennas")]
    public HeartbeatRadioControlAntennas Antennas { get; set; }

    /// <summary>
    /// Number of Radio Packets received
    /// </summary>
    /// <value>Number of Radio Packets received</value>
    [DataMember(Name = "numRadioPacketsRxed", EmitDefaultValue = false)]
    [JsonPropertyName("numRadioPacketsRxed")]
    public decimal? NumRadioPacketsRxed { get; set; }

    /// <summary>
    /// Total number of Tags Read
    /// </summary>
    /// <value>Total number of Tags Read</value>
    [DataMember(Name = "numTagReads", EmitDefaultValue = false)]
    [JsonPropertyName("numTagReads")]
    public decimal? NumTagReads { get; set; }

    /// <summary>
    /// Gets or Sets NumTagReadsPerAntenna
    /// </summary>
    [DataMember(Name = "numTagReadsPerAntenna", EmitDefaultValue = false)]
    [JsonPropertyName("numTagReadsPerAntenna")]
    public HeartbeatRadioControlNumTagReadsPerAntenna NumTagReadsPerAntenna { get; set; }

    /// <summary>
    /// Number of Tag Data messages transfered
    /// </summary>
    /// <value>Number of Tag Data messages transfered</value>
    [DataMember(Name = "numDataMessagesTxed", EmitDefaultValue = false)]
    [JsonPropertyName("numDataMessagesTxed")]
    public decimal? NumDataMessagesTxed { get; set; }

    /// <summary>
    /// number of Errors generated by Radio Control
    /// </summary>
    /// <value>number of Errors generated by Radio Control</value>
    [DataMember(Name = "numErrors", EmitDefaultValue = false)]
    [JsonPropertyName("numErrors")]
    public decimal? NumErrors { get; set; }

    /// <summary>
    /// number of Warnings generated by Radio Control
    /// </summary>
    /// <value>number of Warnings generated by Radio Control</value>
    [DataMember(Name = "numWarnings", EmitDefaultValue = false)]
    [JsonPropertyName("numWarnings")]
    public decimal? NumWarnings { get; set; }


    /// <summary>
    /// Get the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class HeartbeatRadioControl {\n");
        sb.Append("  Status: ").Append(Status).Append("\n");
        sb.Append("  Cpu: ").Append(Cpu).Append("\n");
        sb.Append("  Ram: ").Append(Ram).Append("\n");
        sb.Append("  Uptime: ").Append(Uptime).Append("\n");
        sb.Append("  RadioActivity: ").Append(RadioActivity).Append("\n");
        sb.Append("  RadioConnection: ").Append(RadioConnection).Append("\n");
        sb.Append("  Antennas: ").Append(Antennas).Append("\n");
        sb.Append("  NumRadioPacketsRxed: ").Append(NumRadioPacketsRxed).Append("\n");
        sb.Append("  NumTagReads: ").Append(NumTagReads).Append("\n");
        sb.Append("  NumTagReadsPerAntenna: ").Append(NumTagReadsPerAntenna).Append("\n");
        sb.Append("  NumDataMessagesTxed: ").Append(NumDataMessagesTxed).Append("\n");
        sb.Append("  NumErrors: ").Append(NumErrors).Append("\n");
        sb.Append("  NumWarnings: ").Append(NumWarnings).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Get the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
        return JsonSerializer.Serialize(this, this.GetType());
    }

}
